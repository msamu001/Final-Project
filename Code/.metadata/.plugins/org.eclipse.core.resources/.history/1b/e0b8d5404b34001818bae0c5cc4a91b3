import java.util.Random;

public class SDS {
	private EWG graph;
	private Agent[] agent;
	private double actiRate;
	private int it;
	private Random rand;
	
	public SDS(EWG g, int agentNum, double activation, int iteration) {
		graph = g;
		agent = new Agent[agentNum];
		actiRate = activation * 0.01;
		it = iteration;
		rand = new Random();
		init();
	}
	
	public void run(){
		for(int i = 0; i < it; i++) {
			test();
			diffuse();
		}
	}
	
	public void setAgents(Agent[] a) {
		agent = a;
	}
	
	public Agent[] getAgents() {
		return agent;
	}
	
	public void setRate(double ar) {
		actiRate = ar;
	}
	
	public double getRate() {
		return actiRate;
	}
	
	public void setGraph(EWG g) {
		graph = g;
	}
	
	public EWG getGraph() {
		return graph;
	}
	
	public int getIt() {
		return it;
	}
	
	private void init() {
		for(int i = 0; i < agent.length; i++) {
			agent[i] = new Agent((graph));
		}
	}
	
	private void test() {
		
	}
	
	private void diffuse() {
		
	}
	
	private static int partition(Agent[] A, int lo, int hi) {
		double pivot = A[lo + (hi - lo)/2].getFitness(); // Middle index
		int i = lo;
		int j = hi;
		while(i <= j) {
			while(A[i].getFitness() > pivot) i++;
			while(A[j].getFitness() < pivot) j--;
			if(i >= j) return j;
			if(i < j) {
				Agent temp = A[i];
				A[i] = A[j];
				A[j] = temp;
				i++;
				j--;
			}
		}
		return j;
	}
}
