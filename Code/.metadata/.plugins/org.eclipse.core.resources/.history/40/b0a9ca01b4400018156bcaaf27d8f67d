import java.util.Random;

public class SDS {
	private EWG graph;
	private Agent[] agent;
	private double actiRate;
	private int it;
	private Random rand;
	private double[] best, worst, median, mean;
	
	public SDS(EWG g, int agentNum, double activation, int iteration) {
		graph = g;
		agent = new Agent[agentNum];
		actiRate = activation * 0.01;
		it = iteration;
		rand = new Random();
		best = new double[iteration];
		worst = new double[iteration];
		median = new double[iteration];
		mean = new double[iteration];
		init();
	}
	
	public void run() {
		run(0);
	}
	
	public void run(int type) {
		for(int i = 0; i < it; i++) {
			switch(type) {		
			case 1:
				test(true);
				break;
			case 2:
				testD();
				break;
			default:
				test();
				break;
			}
			diffuse();
			results(i);
		}
	}
	
	public void setAgents(Agent[] a) {
		agent = a;
	}
	
	public Agent[] getAgents() {
		return agent;
	}
	
	public void setRate(double ar) {
		actiRate = ar;
	}
	
	public double getRate() {
		return actiRate;
	}
	
	public void setGraph(EWG g) {
		graph = g;
	}
	
	public EWG getGraph() {
		return graph;
	}
	
	public int getIt() {
		return it;
	}
	
	public double[] getBest() {
		return best;
	}
	
	public double[] getWorst() {
		return worst;
	}
	
	private void init() {
		for(int i = 0; i < agent.length; i++) {
			agent[i] = new Agent((graph));
		}
	}
	
	private void test() {
		test(false);
	}
	
	private void test(boolean roulette) {
		double graphWeight = graph.weight();
		double sumFit = 0;
		double sum = 0;
		
		// Calculates the fitness of each agent
		for(int i = 0; i < agent.length; i++) {
			double hypoWeight = agent[i].getHypo().weight();
			agent[i].setFitness(graphWeight - hypoWeight);
			sumFit += agent[i].getFitness();
		}
		
		// Convert fitness to % 
		for(int i = 0; i < agent.length; i++) {
			double fitness = agent[i].getFitness();
			fitness /= sumFit;
			agent[i].setFitness(fitness);
		}
		
		// Agents are activated by roulette selection
		if(roulette) {
			while(sum < actiRate) {
				int rNum = rand.nextInt(100);
				int iSum = 0;
				
				// Locates agent based by the random number
				for(int i = 0; i < agent.length; i++) {
					iSum += agent[i].getFitness(); // creates roulette
					if(iSum >= rNum) {
						if(agent[i].getStatus()) { // if agent is active spin roulette again
							break;
						} else {
							agent[i].setStatus(true);
							sum += agent[i].getFitness();
							break;
						}
					}
				}
			}
		} else {
			// Sorts agents in descending order
			quicksort(agent, 0, agent.length-1);
			
			// Activate the top X agents when X is actiRate
			for(int i = 0; i < agent.length; i++) {
				sum += agent[i].getFitness();
				if(i == 0) agent[i].setStatus(true);
				else if(sum < actiRate) agent[i].setStatus(true);
				else agent[i].setStatus(false);
			}
		}
	}
	
	private void testD() {
		int rNum = 0;
		for(int i = 0; i < agent.length; i++) agent[i].setFitness(agent[i].getHypo().weight());
		for(int i = 0; i < agent.length; i++) {
			while(rNum == i)
				rNum = rand.nextInt(agent.length);
			if(agent[i].getFitness() < agent[rNum].getFitness()) agent[i].setStatus(true);
		}
	}
	
	private void diffuse() {
		for(int i = 0; i < agent.length; i++) {
			if(agent[i].getStatus() == false) {
				int rAgent = rand.nextInt(agent.length);
				if(agent[rAgent].getStatus()) agent[i].setHypo(agent[rAgent].getHypo());
				else agent[i].setHypo((graph));
			}
		}
	}
	
	private void results(int i) {
		results(i, false);
	}
	
	private void results(int i, boolean weight) {
		double sum = 0;
		
		if(weight) { // Fitness = Weight
			quicksort(agent, agent.length-1, 0); // sorts in acending order
			best[i] = agent[0].getFitness();
			worst[i] = agent[-1].getFitness();
			if(agent.length%2 == 0) {
				sum = agent[agent.length/2].getFitness();
				sum += agent[agent.length/2 - 1].getFitness();
				median[i] = sum/2;
				sum = 0;
			} else median[i] = agent[agent.length/2].getFitness();
			for(Agent a: agent) sum += a.getFitness();
			mean[i] = sum/agent.length;
		}
		else { // Fitness is calculated
			quicksort(agent, 0, agent.length-1); // sorts in descending order			
			best[i] = agent[0].getHypo().weight();
			worst[i] = agent[-1].getHypo().weight();
			if(agent.length%2 == 0) {
				sum = agent[agent.length/2].getHypo().weight();
				sum += agent[agent.length/2 - 1].getHypo().weight();
				median[i] = sum/2;
				sum = 0;
			} else median[i] = agent[agent.length/2].getHypo().weight();
			for(Agent a: agent) sum += a.getHypo().weight();
			mean[i] = sum/agent.length;
		}
	}
	
	private static Agent[] quicksort(Agent[] A, int lo, int hi) {
		if (lo < hi) {
			int p = partition(A, lo, hi);
			quicksort(A, lo, p);
			quicksort(A, p+1, hi);
		}
		return A;
	}
	
	private static int partition(Agent[] A, int lo, int hi) {
		double pivot = A[lo + (hi - lo)/2 + 1].getFitness(); // Middle index
		int i = lo;
		int j = hi;
		while(i <= j) {
			while(A[i].getFitness() > pivot) i++;
			while(A[j].getFitness() < pivot) j--;
			if(i >= j) return j;
			if(i < j) {
				Agent temp = A[i];
				A[i] = A[j];
				A[j] = temp;
				i++;
				j--;
			}
		}
		return j;
	}
}